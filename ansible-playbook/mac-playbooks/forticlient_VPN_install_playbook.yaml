---
- name: Check .dmg installer checksum
  hosts: "{{ target }}"
  gather_facts: false
  vars:
        file_contents: "{{ lookup('file', '/home/eng/border_control/fort_check.txt') }}"
  tasks:
    - name: Download the .dmg file
      ansible.builtin.copy:
        src: /home/eng/apps/FortiClientVPN.dmg
        dest: "/tmp/forticlientVPN.dmg"

    - name: Download the automator
      ansible.builtin.copy:
        src: ~/ansible/Automator/FortiTray_Allow.workflow
        dest: "./Desktop/FortiTray_Allow.workflow"

    - name: Calculate the checksum of the downloaded file
      command: "shasum -a 512 '/tmp/forticlientVPN.dmg'"
      register: calculated_checksum
        
    - name: Compare checksum values
      assert:
        that: "{{ calculated_checksum.stdout.split()[0] == file_contents }}"
        msg: "Checksums do not match. File may be corrupted."

    - name: Check if volume is already mounted
      shell: hdiutil info | grep "/Volumes/FortiClientInstaller"
      ignore_errors: true
      register: is_volume_mounted

    - name: Mount DMG if not already mounted
      command: hdiutil attach -nobrowse -mountpoint "/Volumes/FortiClient" "/tmp/forticlientVPN.dmg"
      when: is_volume_mounted.rc != 0
  
    - name: Mount DMG
      command: hdiutil attach -nobrowse -mountpoint "/Volumes/FortiClient" "/tmp/forticlientVPN.dmg"
      register: mounted_volume

    - name: Debug path existence
      debug:
        msg: "Path exists: {{ '/Volumes/FortiClient' | realpath }}"

    - name: Install App
      command: sudo installer -pkg "/Volumes/FortiClient/Install.mpkg" -target /
      become: yes

    - name: Run Automator Workflow
      command: "automator /Desktop/FortiTray_Allow.workflow"
      become: yes

    - name: Pause to allow installation to complete
      pause:
        seconds: 15

    - name: Unmount DMG
      command: hdiutil detach "/Volumes/FortiClient"

    - name: Delete .dmg specified
      file:
        path: "/tmp/forticlientVPN.dmg"
        state: absent

    - name: Allow FortiTray to add VPN configurations
      expect:
        command: "/Applications/FortiClient.app/Contents/Resources/runtime.helper/FortiTray.app/Contents/MacOS/FortiTray" 
        responses:
          "Allow": true
          "Don't Allow": false